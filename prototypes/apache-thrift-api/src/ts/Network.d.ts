//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./wallet_types');
import PostTransactionResult = ttypes.PostTransactionResult
import BlockHeader = ttypes.BlockHeader

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  test(ok: string): string;

  test(ok: string, callback?: (error: void, response: string)=>void): void;

  latestBlockHeader(): BlockHeader;

  latestBlockHeader(callback?: (error: void, response: BlockHeader)=>void): void;

  postTransaction(tx: Buffer): PostTransactionResult;

  postTransaction(tx: Buffer, callback?: (error: void, response: PostTransactionResult)=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_test(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_latestBlockHeader(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_postTransaction(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
