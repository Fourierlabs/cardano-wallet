//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.PostTransactionResult = {
  '0' : 'MempoolFull',
  'MempoolFull' : 0,
  '1' : 'Accepted',
  'Accepted' : 1
};
var BlockHeader = module.exports.BlockHeader = function(args) {
  this.slotNo = null;
  this.blockHeight = null;
  this.hash = null;
  this.parentHeaderHash = null;
  if (args) {
    if (args.slotNo !== undefined && args.slotNo !== null) {
      this.slotNo = args.slotNo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field slotNo is unset!');
    }
    if (args.blockHeight !== undefined && args.blockHeight !== null) {
      this.blockHeight = args.blockHeight;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field blockHeight is unset!');
    }
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hash is unset!');
    }
    if (args.parentHeaderHash !== undefined && args.parentHeaderHash !== null) {
      this.parentHeaderHash = args.parentHeaderHash;
    }
  }
};
BlockHeader.prototype = {};
BlockHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.slotNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.blockHeight = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.parentHeaderHash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockHeader.prototype.write = function(output) {
  output.writeStructBegin('BlockHeader');
  if (this.slotNo !== null && this.slotNo !== undefined) {
    output.writeFieldBegin('slotNo', Thrift.Type.I32, 1);
    output.writeI32(this.slotNo);
    output.writeFieldEnd();
  }
  if (this.blockHeight !== null && this.blockHeight !== undefined) {
    output.writeFieldBegin('blockHeight', Thrift.Type.I64, 2);
    output.writeI64(this.blockHeight);
    output.writeFieldEnd();
  }
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 3);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }
  if (this.parentHeaderHash !== null && this.parentHeaderHash !== undefined) {
    output.writeFieldBegin('parentHeaderHash', Thrift.Type.STRING, 4);
    output.writeString(this.parentHeaderHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

