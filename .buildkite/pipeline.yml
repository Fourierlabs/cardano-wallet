env:
  LC_ALL: "en_US.UTF-8"
  NIX_PATH: "channel:nixos-21.11"

  # Per-host variables - shared across containers on host
  CACHE_DIR: "/cache/cardano-wallet"
  macos: "x86_64-darwin"
  linux: "x86_64-linux"


steps:
  - label: 'Prevent merging to wrong branch'
    if: 'build.branch == "staging"'
    command: './.buildkite/check-bors.sh'
    agents:
      system: ${linux}

  - wait: ~
    if: 'build.branch == "staging"'


  - group: Check auto-generated Nix
    steps:
      - label: 'Check auto-generated Nix'
        key: nix
        commands:
          - './nix/regenerate.sh'
        agents:
          system: ${linux}

      - label: 'Check auto-generated Nix on macos'
        key: macos-nix
        commands:
          - './nix/regenerate.sh'
        agents:
          system: ${macos}

  - label: 'Build all tests and run unit (Linux)'
    depends_on: nix
    key: linux-build
    command:
      - 'nix build .#ci.tests.all'
      - 'nix build .#ci.benchmarks.all'
      - 'nix build -L .#ci.${linux}.tests.run.unit'

    agents:
      system: ${linux}

  - label: 'Check Cabal Configure (Haskell.nix shellFor)'
    depends_on: nix
    command: 'nix develop --command scripts/buildkite/check-haskell-nix-cabal.sh'
    agents:
      system: ${linux}

  - label: 'Check Stylish Haskell'
    depends_on: nix
    command: 'nix develop --command .buildkite/check-stylish.sh'
    agents:
      system: ${linux}

  - label: 'Check HLint'
    depends_on: nix
    command: 'nix develop --command bash -c "echo +++ HLint ; hlint lib"'
    agents:
      system: ${linux}

  - label: 'Validate OpenAPI Specification'
    depends_on: nix
    command: 'nix develop --command bash -c "echo +++ openapi-spec-validator ; openapi-spec-validator --schema 3.0.0 specifications/api/swagger.yaml"'
    agents:
      system: ${linux}

  - label: 'Build Docker Image'
    depends_on: nix
    command:
      - "mkdir -p config && echo '{  outputs = _: { dockerHubRepoName = \"inputoutput/cardano-wallet\"; }; }'  > config/flake.nix"
      - "nix build .#pushDockerImage --override-input hostNixpkgs \"path:$(nix eval --impure -I $NIX_PATH --expr '(import <nixpkgs> {}).path')\" --override-input customConfig path:./config -o docker-build-push"
      - "./docker-build-push"
    agents:
      system: ${linux}
    soft_fail:
      - exit_status: '*'

  - label: 'TODO list'
    depends_on: nix
    command: 'nix develop --command scripts/todo-list.sh'
    agents:
      system: ${linux}

  - label: 'Lint bash shell scripts'
    depends_on: nix
    commands:
      - 'echo +++ Shellcheck'
      - './scripts/shellcheck.sh'
    agents:
      system: ${linux}

  - label: 'HLS works'
    depends_on: nix
    command: |
        ln -sf hie-direnv.yaml hie.yaml
        nix develop --command bash -c "haskell-language-server lib/wallet/src/Cardano/Wallet.hs"
    agents:
      system: ${linux}

  - block: "Integration tests on linux"
    if: '(build.branch != "staging") && (build.branch != "trying")'
    key: trigger-linux
    prompt: "Clicking this button will proceed with linux integration tests"
    depends_on:
      - linux-nix

  - label: 'Run integration tests on linux'
    command: 'nix build -L .#ci.${linux}.tests.run.integration'
    depends_on:
      - trigger-linux
      - linux-build
    agents:
      system: ${linux}

  - block: "Unit test on macos"
    if: '(build.branch != "staging") && (build.branch != "trying")'
    key: trigger-macos
    prompt: "Clicking this button will proceed with macos unit tests"
    depends_on:
      - macos-nix

  - label: 'Build all tests on macos'
    depends_on: [macos-nix, trigger-macos]
    key: macos-build-tests
    command: 'GC_DONT_GC=1 nix build -L .#ci.${macos}.tests.run.unit'
    agents:
      system: ${macos}

  - block: "Linux build package"
    if: '(build.branch != "staging") && (build.branch != "trying")'
    key: trigger-build-linux-package
    prompt: "Clicking this button will proceed to build linux package"
    depends_on:
      - nix

  - label: 'Build cardano-wallet package for Linux'
    depends_on: [nix, trigger-build-linux-package, linux-build]
    key: build-linux
    command: nix build -o result/linux .#ci.artifacts.linux64.release
    artifact_paths: [ "./result/linux/**" ]
    agents:
      system: ${linux}

  - block: "Build windows artifacts"
    if: '(build.branch != "staging") && (build.branch != "trying")'
    key: trigger-build-windows-artifacts
    prompt: "Clicking this button will proceed to build windows artifacts"
    depends_on:
      - nix

  - label: 'Build cardano-wallet package for Windows'
    depends_on: [nix, trigger-build-windows-artifacts]
    key: build-windows
    command: nix build -o result/windows .#ci.artifacts.win64.release
    artifact_paths: [ "./result/windows/**" ]
    agents:
      system: ${linux}

  - label: 'Build Windows testing bundle'
    depends_on: [nix, trigger-build-windows-artifacts]
    key: build-windows-tests
    command: nix build -o result/windows-tests .#ci.artifacts.win64.tests
    artifact_paths: [ "./result/windows-tests/**" ]
    agents:
      system: ${linux}

  - block: "Build macos artifacts"
    if: '(build.branch != "staging") && (build.branch != "trying")'
    key: trigger-build-macos-artifacts
    prompt: "Clicking this button will proceed to build macos artifacts"
    depends_on:
      - nix

  - label: 'Build cardano-wallet package for Macos (Intel)'
    depends_on: [nix, trigger-build-macos-artifacts]
    key: build-macos
    command: nix build -o result/macos-intel .#ci.artifacts.macos-intel.release
    artifact_paths: [ "./result/macos-intel/**" ]
    agents:
      system: ${macos}
